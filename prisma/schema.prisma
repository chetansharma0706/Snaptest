// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql" // can be "mysql" or "sqlite" if you want
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[] // From Auth.js adapter
  sessions      Session[] // From Auth.js adapter

  quizzes   Quiz[]    @relation("UserQuizzes")
  attempts  Attempt[] @relation("UserAttempts")
  createdAt DateTime  @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id          String     @id @default(cuid())
  title       String
  description String?
  timeLimit   Int?
  createdBy   String
  user        User       @relation("UserQuizzes", fields: [createdBy], references: [id])
  questions   Question[]
  attempts    Attempt[]
  createdAt   DateTime   @default(now())
  status      QuizStatus @default(DRAFT)
}

model Question {
  id      String          @id @default(cuid())
  text    String
  quizId  String
  quiz    Quiz            @relation(fields: [quizId], references: [id])
  options Option[]        
  answers AttemptAnswer[]
  correctOptionIndex Int  @default(0)
}

model Option {
  id         String          @id @default(cuid())
  text       String
  isCorrect  Boolean         @default(false) // âœ… no extra relation needed
  questionId String
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answers    AttemptAnswer[]
}

model Attempt {
  id        String          @id @default(cuid())
  userId    String
  quizId    String
  score     Int             @default(0)
  user      User            @relation("UserAttempts", fields: [userId], references: [id])
  quiz      Quiz            @relation(fields: [quizId], references: [id])
  answers   AttemptAnswer[]
  createdAt DateTime        @default(now())
}

model AttemptAnswer {
  id         String   @id @default(cuid())
  attemptId  String
  questionId String
  optionId   String
  attempt    Attempt  @relation(fields: [attemptId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  option     Option   @relation(fields: [optionId], references: [id])
}

enum QuizStatus {
  DRAFT
  PUBLISHED
  BLOCKED
}
